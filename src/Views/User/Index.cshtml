@{
    ViewData["Title"] = "Users";
}

<div class="modern-container">
    <div class="page-header">
        <div class="header-content">
            <h1 class="page-title">Users</h1>
            <div class="header-actions">
                <a href="/users/create" id="addUserBtn" class="btn-primary" style="display: none;">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    Add User
                </a>
            </div>
        </div>

        <div class="search-and-filters">
            <div class="search-container">
                <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                    stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <path d="21 21l-4.35-4.35"></path>
                </svg>
                <input type="text" class="search-input" id="Search" placeholder="Search users">
                <button type="button" class="search-clear-btn" id="searchClearBtn" onclick="clearSearch()"
                    style="display: none;">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
            <div class="view-toggle">
                <button class="toggle-btn" data-view="card" title="Card View">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="7" height="7"></rect>
                        <rect x="14" y="3" width="7" height="7"></rect>
                        <rect x="3" y="14" width="7" height="7"></rect>
                        <rect x="14" y="14" width="7" height="7"></rect>
                    </svg>
                </button>
                <button class="toggle-btn active" data-view="list" title="List View">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="8" y1="6" x2="21" y2="6"></line>
                        <line x1="8" y1="12" x2="21" y2="12"></line>
                        <line x1="8" y1="18" x2="21" y2="18"></line>
                        <line x1="3" y1="6" x2="3.01" y2="6"></line>
                        <line x1="3" y1="12" x2="3.01" y2="12"></line>
                        <line x1="3" y1="18" x2="3.01" y2="18"></line>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <div class="content-area">
        <!-- Card View -->
        <div id="cardView" class="users-grid" style="display: none;">
        </div>

        <!-- List View -->
        <div id="listView" class="users-list">
            <div class="list-header">
                <div class="list-col">User</div>
                <div class="list-col">Email</div>
                <div class="list-col">Hobbies</div>
                <div class="list-col">Joined</div>
                <div class="list-col">Actions</div>
            </div>
            <div id="listContent">
                <!-- Dynamic list content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <div class="pagination-info">
            <span id="paginationInfo">Showing 1-10 of 100 users</span>
        </div>
        <div class="pagination-controls" id="paginationControls">
            <!-- Dynamic pagination will be loaded here -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let page = 1;
        let size = 10;
        let currentView = 'list';
        const searchInput = document.getElementById('Search');
        const cardView = document.getElementById('cardView');
        const listView = document.getElementById('listView');
        let currentUserId = null;
        let currentUserIsAdmin = false;
        let lastUsersData = [];

        document.addEventListener('DOMContentLoaded', async function () {
            // Check authentication before loading users
            if (!await authManager.requireAuth()) {
                return;
            }

            // Resolve current user and role
            const me = await authManager.getCurrentUser();
            if (me) {
                currentUserId = me.id;
                const roles = Array.isArray(me.roles) ? me.roles : [me.roles].filter(Boolean);
                currentUserIsAdmin = roles.includes('Admin');
            }

            // Show Add User button only for admins
            const addUserBtn = document.getElementById('addUserBtn');
            if (currentUserIsAdmin && addUserBtn) {
                addUserBtn.style.display = 'inline-flex';
            }

            // Show success/error messages from TempData
        @if (TempData["SuccessMessage"] != null)
        {
            <text>messageSystem.success('@Html.Raw(TempData["SuccessMessage"])');</text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <text>messageSystem.error('@Html.Raw(TempData["ErrorMessage"])');</text>
        }

                loadUsers();

            // View toggle functionality
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    document.querySelectorAll('.toggle-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentView = this.dataset.view;
                    toggleView();
                });
            });

            // Filter tabs functionality
            document.querySelectorAll('.filter-tab').forEach(tab => {
                tab.addEventListener('click', function () {
                    document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    // Add filter logic here
                    loadUsers();
                });
            });

            // Search functionality
            searchInput.addEventListener('input', debounce(() => {
                page = 1;
                loadUsers();
                toggleSearchClearButton();
            }, 300));

            // Show/hide clear button based on search input
            searchInput.addEventListener('input', toggleSearchClearButton);
        });

        function toggleView() {
            console.log('Toggling to view:', currentView);
            if (currentView === 'card') {
                cardView.style.display = 'grid';
                listView.style.display = 'none';
                console.log('Switched to card view');
                // If card view is empty but we have users data, render it
                if (cardView.innerHTML.trim() === '' && lastUsersData && lastUsersData.length > 0) {
                    renderUsersCards(lastUsersData);
                }
            } else {
                cardView.style.display = 'none';
                listView.style.display = 'block';
                console.log('Switched to list view');
                // If list view is empty but we have users data, render it
                if (document.getElementById('listContent').innerHTML.trim() === '' && lastUsersData && lastUsersData.length > 0) {
                    renderUsersList(lastUsersData);
                }
            }
        }

        async function loadUsers() {
            const search = encodeURIComponent(searchInput.value || '');
            const url = `/api/users?page=${page}&size=${size}&search=${search}`;
            console.log('Making request to:', url);
            console.log('Using cookie-based auth');

            try {
                const res = await fetch(url, { credentials: 'include' });
                console.log('Users API response status:', res.status);

                if (res.status === 401) {
                    console.log('401 Unauthorized, redirecting to login');
                    window.location.href = '/login';
                    return;
                }
                if (!res.ok) {
                    console.error('Users API failed with status:', res.status);
                    throw new Error('Failed to load users');
                }
                const payload = await res.json();
                const data = payload.data || payload;

                console.log('Current view:', currentView);
                console.log('Data received:', data);
                console.log('Users data:', data.items);

                // Store the users data for view switching
                lastUsersData = data.items || [];

                // Render both views with the new data
                renderUsersCards(lastUsersData);
                renderUsersList(lastUsersData);

                renderPagination(data.page || page, data.size || size, data.totalCount || data.total || 0);
            } catch (e) {
                console.error('Error loading users:', e);
        @* alert('Error loading users'); *@
                                                                                                                                                                            }
        }

        function renderUsersCards(users) {
            if (!users.length) {
                cardView.innerHTML = '<div class="no-users">No users found</div>';
                return;
            }

            cardView.innerHTML = users.map(user => {
                const canEdit = currentUserIsAdmin || (currentUserId === user.id);
                return `
                                    <div class="user-card" onclick="viewUser(${user.id})" style="cursor: pointer;">
                                        <div class="user-avatar-card">
                                            <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user.fullName)}&background=random&color=fff&size=60" alt="${user.fullName}">
                                        </div>
                                        <div class="user-info">
                                            <div class="user-name-container">
                                                <h3 class="user-name">${user.fullName}</h3>
                                                ${currentUserId === user.id ? '<span class="you-indicator">It\'s you</span>' : ''}
                                            </div>
                                            <p class="user-location">${user.email}</p>
                                            <div class="user-tags">
                                                ${generateHobbyTagsFromData(user.hobbies || [])}
                                            </div>
                                        </div>
                                        <div class="card-actions">
                                            ${canEdit ? `
                                            <button class="btn-card-action" onclick="event.stopPropagation(); editUser(${user.id})">
                                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                                </svg>
                                                Edit
                                            </button>
                                            ` : ''}
                                            ${currentUserIsAdmin ? `
                                                <button class="btn-card-action btn-danger ${currentUserId === user.id ? 'btn-disabled' : ''}" 
                                                        ${currentUserId === user.id ? 'disabled' : ''} 
                                                        onclick="event.stopPropagation(); ${currentUserId === user.id ? 'return false;' : `deleteUser(${user.id}, '${user.fullName}')`}"
                                                        title="${currentUserId === user.id ? 'You cannot delete your own account' : 'Delete user'}">
                                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                        <polyline points="3,6 5,6 21,6"></polyline>
                                                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                                        <line x1="10" y1="11" x2="10" y2="17"></line>
                                                        <line x1="14" y1="11" x2="14" y2="17"></line>
                                                    </svg>
                                                    Delete
                                                </button>
                                            ` : ''}
                                        </div>
                                    </div>
                                `;
            }).join('');
        }

        function renderUsersList(users) {
            if (!users.length) {
                document.getElementById('listContent').innerHTML = '<div class="no-users">No users found</div>';
                return;
            }

            document.getElementById('listContent').innerHTML = users.map(user => {
                const canEdit = currentUserIsAdmin || (currentUserId === user.id);
                return `
                                                                                                                            <div class="list-item">
                                                                                                                                <div class="list-col">
                                                                                                                                    <div class="user-info-list">
                                                                                                                                        <img src="https://ui-avatars.com/api/?name=${encodeURIComponent(user.fullName)}&background=random&color=fff&size=40" alt="${user.fullName}" class="user-avatar-small">
                                                                                                                                        <div>
                                                                                                                                            <div class="user-name-list-container">
                                                                                                                                                <div class="user-name-list">${user.fullName}</div>
                                                                                                                                                ${currentUserId === user.id ? '<span class="you-indicator-list">It\'s you</span>' : ''}
                                                                                                                                            </div>
                                                                                                                                            <div class="user-username">@@${user.username}</div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <div class="list-col">${user.email}</div>
                                                                                                                                                    <div class="list-col">
                                                                                                                                        <div class="hobby-tags-list">
                                                                                                                                            ${generateHobbyTagsFromData(user.hobbies || [])}
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                <div class="list-col">${formatDate(user.createdAt)}</div>
                                                                                                                                <div class="list-col">
                                                                                                                                    <div class="action-buttons">
                                                                                                                                        <button class="btn-action" onclick="viewUser(${user.id})">View</button>
                                                                                                                                        ${canEdit ? `<button class="btn-action" onclick="editUser(${user.id})">Edit</button>` : ''}
                                                                                                                                        ${currentUserIsAdmin ? `<button class="btn-action btn-danger ${currentUserId === user.id ? 'btn-disabled' : ''}" 
                                                                                                                                                ${currentUserId === user.id ? 'disabled' : ''} 
                                                                                                                                                onclick="${currentUserId === user.id ? 'return false;' : `deleteUser(${user.id}, '${user.fullName}')`}"
                                                                                                                                                title="${currentUserId === user.id ? 'You cannot delete your own account' : 'Delete user'}">Delete</button>` : ''}
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        `;
            }).join('');
        }

        function generateHobbyTags(hobbyCount) {
            const tags = ['reading', 'coding', 'music', 'sports', 'travel', 'photography'];
            return tags.slice(0, Math.min(hobbyCount, 3)).map(tag =>
                `<span class="hobby-tag">${tag}</span>`
            ).join('');
        }

        function generateHobbyTagsFromData(hobbies) {
            if (!hobbies || hobbies.length === 0) {
                return '<span class="hobby-tag no-hobbies">No hobbies</span>';
            }

            // Show up to 3 hobbies
            const displayHobbies = hobbies.slice(0, 3);
            let tagsHtml = displayHobbies.map(hobby => {
                const levelName = getHobbyLevelName(hobby.level);
                return `<span class="hobby-tag hobby-level-${levelName.toLowerCase()}">${hobby.name}</span>`;
            }).join('');

            // If there are more hobbies, show a count
            if (hobbies.length > 3) {
                const remaining = hobbies.length - 3;
                tagsHtml += `<span class="hobby-tag hobby-count">+${remaining} more</span>`;
            }

            return tagsHtml;
        }

        function getHobbyLevelName(levelValue) {
            switch (levelValue) {
                case 1: return 'Beginner';
                case 2: return 'Intermediate';
                case 3: return 'Expert';
                default: return 'Unknown';
            }
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        function renderPagination(currentPage, pageSize, totalCount) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const startItem = ((currentPage - 1) * pageSize) + 1;
            const endItem = Math.min(currentPage * pageSize, totalCount);

            document.getElementById('paginationInfo').textContent =
                `Showing ${startItem}-${endItem} of ${totalCount} users`;

            if (totalPages <= 1) {
                document.getElementById('paginationControls').innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous button
            if (currentPage > 1) {
                paginationHTML += `<button class="pagination-btn" onclick="changePage(${currentPage - 1})">Previous</button>`;
            }

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `<button class="pagination-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            if (currentPage < totalPages) {
                paginationHTML += `<button class="pagination-btn" onclick="changePage(${currentPage + 1})">Next</button>`;
            }

            document.getElementById('paginationControls').innerHTML = paginationHTML;
        }

        function changePage(newPage) {
            page = newPage;
            loadUsers();
        }

        function viewUser(userId) {
            window.location.href = `/users/details/${userId}`;
        }

        function editUser(userId) {
            window.location.href = `/users/edit/${userId}`;
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        async function deleteUser(userId, userName) {
            if (!confirm(`Are you sure you want to delete user "${userName}"? This action cannot be undone.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'DELETE',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    messageSystem.success(`User "${userName}" deleted successfully`);
                    // Reload the users list
                    await loadUsers();
                } else {
                    const error = await response.json();
                    messageSystem.error(error.message || 'Failed to delete user');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                messageSystem.error('Error deleting user. Please try again.');
            }
        }

        function clearSearch() {
            const searchInput = document.getElementById('Search');
            searchInput.value = '';
            searchInput.focus();
            page = 1;
            loadUsers();
            toggleSearchClearButton();
        }

        function toggleSearchClearButton() {
            const searchInput = document.getElementById('Search');
            const clearBtn = document.getElementById('searchClearBtn');

            if (searchInput.value.trim().length > 0) {
                clearBtn.style.display = 'flex';
            } else {
                clearBtn.style.display = 'none';
            }
        }
    </script>
}